// Floyd's Tortoise and Hare Algorithm: Finding a Cycle in a Linked List
/*

		   a              b
head - - - - - - - -> P - - -> Q
					 /         \
					|           |
					 \         /
					    - - -
					          c

From 'head' point:
-       Walk 'a' distance, to go to P
- then, Walk 'b' distance, to go to Q
- then, Walk 'c' distance, to go to P again

Assume, two persons slow & fast
	start at 'head' point &
	meet at point Q
If slow & fast meet at Q point, we know there is a cycle
The fast is twice as fast as slow person.
	slow walks +1
	fast jumps +2
so, slow travelled = a+b
	fast travelled = a+b +c+b    = a+2b+c
since speed wise, we know
	   fast    == 2 x slow
	=> a+2b+c  == 2(a+b)
	=> a+2b +c == a+ a+2b
	=>       c == a
Once slow & fast meet at Q point, how can we find point P where both met first? 
Assume
	   a slow p1 starts from head &
 another slow q1 starts from Q/slow)
 since c == a, they must meet at point P
	 So we now know the point P (where the cycle begins)

This is  Floyd's Tortoise and Hare Algorithm:  Finding a Cycle in a Linked List 
*/ 

https://leetcode.com/problems/find-the-duplicate-number/

https://leetcode.com/problems/linked-list-cycle-ii/


